 #include<bits/stdc++.h>
 using namespace std;                          
 #define ll long long int
 #define MOD 1000000007
 #define boost ios_base::sync_with_stdio(false);cin.tie(NULL);           
 
 // Problem Statement
 // You are given an array of integers nums, 
 // there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. 
 // Each time the sliding window moves right by one position.
// Return the max sliding window.

 vector<int>maximuminwindow(int a[], int k,int n) 
 {       
        // a- given vector
        deque<int>dq;
        // we will be using deque to push and pop from both
        // sides
        

        // n- size of vector a

         // k-window size

        for(int i=0;i<k;i++)
        {
            while(!dq.empty()&&a[dq.back()]<=a[i])
            {
                dq.pop_back();
                // remove the element form back
            }
            dq.push_back(i);
        }
        vector<int>v;

        // v to store the final answer
        
        for(int i=k;i<n;i++)
        {
            v.push_back(a[dq.front()]);
            while(!dq.empty()&&dq.front()<=i-k)
            {
                dq.pop_front();
            }
            while(!dq.empty()&&a[dq.back()]<=a[i])
            {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        v.push_back(a[dq.front()]);
        
        return v;
    }
 int main(){
  boost

  int n=8;
  int a[n]={1,3,-1,-3,5,3,6,7};
  int k=3;

  vector<int>v=maximuminwindow(a,k,n);

  for(int i=0;i<v.size();i++)
  {
    cout<<v[i]<<" ";
  }

  // output will be 3 3 5 5 6 7

  // time complexity- O(n)
  // space complexity- O(n)

}
